
@{
    ViewBag.Title = "Répertoire";
    IEnumerable<UsersManager.Buttons.SortButtons> sortButtons = new List<UsersManager.Buttons.SortButtons>
    {
        new UsersManager.Buttons.SortButtons
        {
            Description = "Ordonner par date",
            GlyphiconClass = "glyphicon-calendar",
            Value = "calendar"
        },
        new UsersManager.Buttons.SortButtons
        {
            Description = "Ordonner par auteur",
            GlyphiconClass = "glyphicon-user",
            Value = "author"
        },
        new UsersManager.Buttons.SortButtons
        {
            Description = "Ordonner par évaluation",
            GlyphiconClass = "glyphicon-star",
            Value = "evaluation"
        },
    };

}

<h2>Répertoire de photos</h2>


<div id="parameterContainer" class="container">
    <div class="row">
        <div class="col-sm-5 col-md-2">
            @Helper.GlyphiconAction("Create", "glyphicon-plus", "Ajouter une photos")
        </div>

        <div id="searchBar" class="col-sm-5 col-md-5">

        </div>

        <div id="sortButtons" class="col-sm-5 col-md-5">
            @Helper.GenerateSortButtons(sortButtons) 
        </div>
    </div>
</div>

<br />

<div id="photosContainer" class="photosContainerGrid">
    <!-- Peridocally refreshed -->
    @{
        Html.RenderAction("GetPhotos", new { forceRefresh = true });
    }
</div>


@section Scripts { 
    @Scripts.Render("~/bundles/jqueryval") 
    @Scripts.Render("~/bundles/partialRefresh")

<script defer>
    class PartialRefreshSettings {
        constructor(url, container, time, callback) {
            this.baseUrl = url;

            this.container = container;
            this.time = time;
            this.callback = callback;

            this.partialRefresh = new PartialRefresh(url, container, time, callback);
            this.arguments = {};
        }

        updateRefresh() {
            clearInterval(this.partialRefresh.interval); // clear refresh interval
            this.partialRefresh = new PartialRefresh(this.baseUrl + this.getArguments(), this.container, this.time, this.callback);
            this.partialRefresh.refresh();
        }

        editArgument(key, value) {
            if (key == undefined || value == undefined)
                return false;
            this.arguments[key] = value;

            return true;
        }

        getArgument(key) {
            return this.arguments[key];
        }

        removeArgument(key) {
            delete this.arguments[key];
            return true;
        }

        getArguments() {
            let res = jQuery.isEmptyObject(this.arguments) ? "" : "?";
            Object.keys(this.arguments).forEach(key => {
                if (res.length != 1) res += "&"
                res += `${key}=${this.arguments[key]}`;
            });

            return res;
        }
    }

    let partialRefreshSettings = new PartialRefreshSettings("@Url.Action("GetPhotos")", "photosContainer", 5, postRefreshCallback);

    partialRefreshSettings.editArgument("sortBy", "calendar");
    partialRefreshSettings.editArgument("inverted", "n");

    function postRefreshCallback() {
        console.log("Refreshed the page!");
    }


    // attach sortButtons callback
    $("#sortButtons").children().each(function (index) {
        let currentSelected = partialRefreshSettings.getArgument("sortBy");
            
        if (currentSelected == this.id) // toggle css for the selected sort button
            $(`#${this.id} span`).toggleClass("glyphSelected");

        $(this).click(function () {
            let currentSelected = partialRefreshSettings.getArgument("sortBy");
            let invert = partialRefreshSettings.getArgument("inverted") == 'y' ? true : false;

            $("#sortButtons > a > span").removeClass("glyphSelected"); // reset css classes for all the sort buttons
            $(`#${this.id} span`).toggleClass("glyphSelected"); // set selected glyphIcon css class

            if (currentSelected == this.id) { // if we clicked on the same icon twice
                invert = !invert; // toggle invert
                partialRefreshSettings.editArgument("inverted", invert ? 'y' : 'n'); // edit inverted parameter inside settings
            }
            else {
                partialRefreshSettings.removeArgument("inverted"); // reset invert sort
                currentSelected = this.id; // if first time clicking on it, set currentSelected
            }

            console.log(partialRefreshSettings.baseUrl + partialRefreshSettings.getArguments());

            partialRefreshSettings.editArgument("sortBy", currentSelected);
            partialRefreshSettings.updateRefresh();
        });
    });

</script> }




